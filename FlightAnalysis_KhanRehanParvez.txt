Project Summary:

The Flight Data Analysis Tool is a Java-based application designed to analyze flight data through graph algorithms, enabling users to import CSV data, create graphs of flights between airports, and perform algorithmic analysis like Dijkstra's, Floyd–Warshall, and BFS. This tool aims to provide insights into route optimization and network efficiency with a user-friendly command-line interface and visualizations, accommodating large datasets and offering comprehensive documentation

List of Algorithms:
1. BFS
2. Dijkstra's algorithm
3. Floyd–Warshall algorithm

Source Code:

1. Main.java


import java.util.Map;
import java.util.*;

public class Main {
    private static final double INF = 1e7;

    public static void main(String[] args) {

        Graph graph = new Graph();
        graph.loadFromCSV("data/flight.csv");


        System.out.println("Dijkstra's Algorithm Results:");
        printDijkstrasResult(graph, "JFK");

        System.out.println("\nBreadth-First Search Results:");
        if (graph.containsVertex("JFK")) {
            BFS.bfs(graph, "JFK");
        } else {
            System.out.println("Vertex 'JFK' not found in the graph.");
        }

        Map<String, Integer> airportIds = new HashMap<>();
        Map<Integer, String> indexToAirport = new HashMap<>();
        int id = 0;
        for (String airport : graph.getAllVertices()) {
            airportIds.put(airport, id);
            indexToAirport.put(id, airport);
            id++;
        }

        double[][] distances = FloydWarshall.initializeDistances(airportIds, graph);

        System.out.println("Initial Distance Matrix:");
        printMatrix(distances, indexToAirport);

        FloydWarshall.computeShortestPaths(distances, airportIds);

        System.out.println("Final Distance Matrix after applying Floyd-Warshall:");
        printMatrix(distances, indexToAirport);
    }

    private static void printDijkstrasResult(Graph graph, String start) {
        if (graph.containsVertex(start)) {
            Map<String, Double> distances = DijkstraAlgorithm.dijkstra(graph, start);
            System.out.println("Shortest travel times from " + start + " to all reachable airports:");
            distances.forEach((destination, distance) -> {
                if (!destination.equals(start)) {
                    System.out.printf("- From %s to %s: %.2f hours%n", start, destination, distance);
                }
            });
        } else {
            System.out.println("Vertex '" + start + "' not found in the graph.");
        }
    }

    private static void printMatrix(double[][] matrix, Map<Integer, String> indexToAirport) {
        System.out.print("     ");
        for (int i = 0; i < matrix.length; i++) {
            System.out.printf("%5s ", indexToAirport.get(i));
        }
        System.out.println();

        for (int i = 0; i < matrix.length; i++) {
            System.out.printf("%5s ", indexToAirport.get(i));
            for (int j = 0; j < matrix.length; j++) {
                if (matrix[i][j] == INF) {
                    System.out.print(" INF ");
                } else {
                    System.out.printf("%5.2f ", matrix[i][j]);
                }
            }
            System.out.println();
        }
    }
}


2. Graph.java

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class Graph {
    private Map<String, List<Edge>> adjacencyList = new HashMap<>();

    public static class Edge {
        String source;
        String vertex;
        double weight;

        public Edge(String source, String vertex, double weight) {
            this.source = source;
            this.vertex = vertex;
            this.weight = weight;
        }

        @Override
        public String toString() {
            return "Edge from " + source + " to " + vertex + " with weight " + weight;
        }
    }

    public void addVertex(String vertex) {
        adjacencyList.putIfAbsent(vertex, new ArrayList<>());
    }

    public void addEdge(String source, String destination, double weight) {
        this.addVertex(source);
        this.addVertex(destination);
        adjacencyList.get(source).add(new Edge(source, destination, weight));

    }

    public List<Edge> getEdges(String vertex) {
        return adjacencyList.getOrDefault(vertex, new ArrayList<>());
    }

    public List<Edge> getAllEdges() {
        List<Edge> allEdges = new ArrayList<>();
        for (List<Edge> edges : adjacencyList.values()) {
            for (Edge edge : edges) {
                if (!allEdges.contains(edge)) {
                    allEdges.add(edge);
                }
            }
        }
        return allEdges;
    }

    public boolean containsVertex(String vertex) {
        return adjacencyList.containsKey(vertex);
    }


    public List<Edge> getAdjacentVertices(String vertex) {
        return new ArrayList<>(adjacencyList.getOrDefault(vertex, new ArrayList<>()));
    }


    public Set<String> getAllVertices() {
        return adjacencyList.keySet();
    }

    public void loadFromCSV(String filePath) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("M/d/yyyy H:mm");
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            br.readLine();
            while ((line = br.readLine()) != null) {
                String[] parts = line.trim().split(",");
                if (parts.length >= 5) {
                    String origin = parts[0].trim();
                    String destination = parts[1].trim();
                    LocalDateTime departureTime = LocalDateTime.parse(parts[3].trim(), formatter);
                    LocalDateTime arrivalTime = LocalDateTime.parse(parts[4].trim(), formatter);
                    long durationMinutes = java.time.Duration.between(departureTime, arrivalTime).toMinutes();
                    double weight = durationMinutes / 60.0;
                    addEdge(origin, destination, weight);
                }
            }
        } catch (IOException e) {
            System.err.println("An error occurred while reading the CSV file: " + e.getMessage());
            e.printStackTrace();
        }
    }
}


3. BFS

import java.util.*;

public class BFS {

    public static void bfs(Graph graph, String start) {
        Queue<String> queue = new LinkedList<>();
        Set<String> visited = new HashSet<>();

        queue.add(start);
        visited.add(start);

        while (!queue.isEmpty()) {
            String current = queue.poll();
            System.out.println("Visited: " + current);
            for (Graph.Edge neighbor : graph.getEdges(current)) {
                if (!visited.contains(neighbor.vertex)) {
                    visited.add(neighbor.vertex);
                    queue.add(neighbor.vertex);
                }
            }
        }
    }
}


4. Dijkstra's

import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;

public class DijkstraAlgorithm {

    public static Map<String, Double> dijkstra(Graph graph, String start) {
        Map<String, Double> distances = new HashMap<>();
        PriorityQueue<Graph.Edge> pq = new PriorityQueue<>((a, b) -> Double.compare(a.weight, b.weight));


        for (String vertex : graph.getAllVertices()) {
            distances.put(vertex, Double.MAX_VALUE);
        }
        distances.put(start, 0.0);
        pq.add(new Graph.Edge(start, start, 0.0));

        while (!pq.isEmpty()) {
            Graph.Edge smallest = pq.poll();
            for (Graph.Edge neighbor : graph.getAdjacentVertices(smallest.vertex)) {
                double alt = distances.get(smallest.vertex) + neighbor.weight;
                if (alt < distances.get(neighbor.vertex)) {
                    distances.put(neighbor.vertex, alt);
                    pq.add(new Graph.Edge(smallest.vertex, neighbor.vertex, alt));
                }
            }
        }

        return distances;
    }
}


5. Floyd–Warshall

import java.util.Map;

public class FloydWarshall {
    private static final double INF = 1e7;  

    public static double[][] initializeDistances(Map<String, Integer> airportIds, Graph graph) {
        int size = airportIds.size();
        double[][] distances = new double[size][size];

        for (double[] row : distances) {
            Arrays.fill(row, INF);
        }
        for (String airport : airportIds.keySet()) {
            int airportId = airportIds.get(airport);
            distances[airportId][airportId] = 0;  
        }

        for (Graph.Edge edge : graph.getAllEdges()) {
            int fromId = airportIds.get(edge.source);
            int toId = airportIds.get(edge.vertex);
            distances[fromId][toId] = edge.weight;  
        }

        return distances;
    }

    public static void computeShortestPaths(double[][] distances, Map<String, Integer> airportIds) {
        int size = airportIds.size();
        for (int k = 0; k < size; k++) {
            for (int i = 0; i < size; i++) {
                for (int j = 0; j < size; j++) {
                    if (distances[i][k] + distances[k][j] < distances[i][j]) {
                        distances[i][j] = distances[i][k] + distances[k][j];
                    }
                }
            }
        }
    }
}


